import_code("./lib/josn.src")
query = "SELECT * FROM Websites WHERE country='UK';"

Lexer = {}
Lexer.tokenize = function(expression)
   result = [] // [{"type": type, "value": value}, ...]
   while expression
      for each_rule in self.rules
         type = each_rule["type"]
         ignore = each_rule["ignore"]
         value = null

         for each_regex in each_rule["regex"]
            regex_result = expression.matches(each_regex)
            for each in regex_result.indexes
               value = regex_result[each]
               break
            end for
            if value then break
         end for

         if value then
            expression = expression[value.len:]
            if ignore then break
            result.push({"type": type, "value": value})
            break
         end if
      end for
   end while
   return result
end function
Lexer.addRule = function(type, regex, ignore=false)
   self["rules"].push({"type": type, "regex": regex, "ignore": ignore})
end function
Lexer.init = function
   result = new Lexer
   result["rules"] = [] // [{"type": type, "regex": [regex, ...], "ignore": bool}, ..]
   return result
end function

lexer = Lexer.init
lexer.addRule("whitespace", ["^(\s+)"], true)
lexer.addRule("reserved", ["^(SELECT|WHERE|UPDATE|FROM|SET|DELETE)\b", "^(select|where|update|from|set|delete)\b"])
lexer.addRule("number", ["^([0-9]+(\.[0-9]+)?|0x[0-9a-fA-F]+|0b[01]+)\b"])
lexer.addRule("word", ["^([a-zA-Z0-9_]+)", "^(\$\{[a-zA-Z0-9_]+\})"])
lexer.addRule("string", ["^((?="")(?:""[^""\\]*(?:\\[\s\S][^""\\]*)*""))", "^((?=')(?:'[^'\\]*(?:\\[\s\S][^'\\]*)*'))", "^((?=`)(?:`[^`\\]*(?:\\[\s\S][^`\\]*)*`))"])
lexer.addRule("special", ["^(\(|\))", "^(!=|<>|==|<=|>=|!<|!>|\|\||::|->>|->|~~\*|~~|!~~\*|!~~|~\*|!~\*|!~|.)"])

Parser = {}
Parser.init = function
    result = new Parser
    return result
end function

tokens = globals.lexer.tokenize(query)
idx = 0
idx_stack = []
ast = {}

requireValue = function(value, result_type="requireValue")
    items = []
    globals.idx_stack.push(globals.idx)
    print "value: " + value + ": " + globals.idx
    if typeof(value) != "list" then
        value = [value]
    end if
    for each_value in value
        if globals.idx >= tokens.len or tokens[globals.idx]["value"] != each_value then
            globals.idx = globals.idx_stack.pop
            return {"flag": false, "type": result_type}
        end if
        items.push({"token_value": tokens[globals.idx]["value"], "token_type": tokens[globals.idx]["type"]})
        globals.idx = globals.idx + 1
    end for
    globals.idx_stack.pop
    return {"flag": true, "type": result_type, "items": items}
end function
requireType = function(types, result_type="requireType")
    items = []
    globals.idx_stack.push(globals.idx)
    print "type: " + types + ": " + globals.idx
    if typeof(types) == "string" then
        types = [types]
    end if
    for each_type in types
        if globals.idx >= tokens.len or tokens[globals.idx]["type"] != each_type then
            globals.idx = globals.idx_stack.pop
            return {"flag": false, "type": result_type}
        end if
        items.push({"token_value": tokens[globals.idx]["value"], "token_type": tokens[globals.idx]["type"]})
        globals.idx = globals.idx + 1
    end for
    globals.idx_stack.pop
    return {"flag": true, "type": result_type, "items": items}
end function
requireFunc = function(funcs, result_type="requireFunc")
    items = []
    globals.idx_stack.push(globals.idx)
    for each_func in funcs
        func_result = each_func()
        if func_result.flag == false then
            globals.idx = globals.idx_stack.pop
            return {"flag": false, "type": result_type}
        end if
        items.push(func_result)
    end for
    globals.idx_stack.pop
    return {"flag": true, "type": result_type, "items": items}
end function
epsilonFunc =  function(result_type="epsilonFunc")
    return {"flag": true, "type": result_type}
end function
parallel = function(funcs, result_type="parallel")
    globals.idx_stack.push(globals.idx)
    for each_func in funcs
        func_result = each_func()
        if func_result.flag == false then
            globals.idx = globals.idx_stack[-1]
        else
            globals.idx_stack.pop
            func_result.type = result_type
            return func_result
        end if
    end for
    globals.idx_stack.pop
    return {"flag": false, "type": result_type}
end function
optional = function(func, result_type="optional")
    return parallel([@func, @epsilonFunc], result_type)
end function
repeated = function(func, result_type="repeated")
    items = []
    flag = true
    while flag
        result = func()
        flag = result.flag
        items.push(result)
    end while
    return {"flag": true, "type": result_type, "items": items}
end function

requireTypeWord = function
    return requireType("word")
end function
requireTypeNumber = function
    return requireType("number")
end function
requireTypeString = function
    return requireType("string")
end function
requireValueStar = function
    return requireValue("*")
end function
requireValueSemicolon = function
    return requireValue(";")
end function
requireComma = function
    return requireValue(",")
end function
// production
selectStatement = function()
    tmp_func = function
        return requireValue("SELECT")
    end function
    return requireFunc([@tmp_func, @selectElements, @fromClause, @requireValueSemicolon], "selectStatement")
end function
selectElements = function()
    tmp_func1 = function
        return requireFunc([@requireComma, @selectElement])
    end function
    tmp_func2 = function
        return repeated(@tmp_func1)
    end function
    return requireFunc([@selectElement, @tmp_func2], "selectElements")
end function
selectElement = function()
    return parallel([@requireTypeWord, @requireValueStar], "selectElement")
end function
fromClause = function()
    tmp_func1 = function
        return requireValue("FROM") 
    end function
    tmp_func2 = function
        where_func = function
            return requireValue("WHERE")
        end function
        return requireFunc([@where_func, @expression])
    end function
    tmp_func3 = function
        return optional(@tmp_func2)
    end function
    return requireFunc([@tmp_func1, @tableSources, @tmp_func3], "fromClause")
end function
tableSources = function()
    tmp_func1 = function
        return requireFunc([@requireComma, @tableSource])
    end function
    tmp_func2 = function
        return repeated(@tmp_func1)
    end function
    return requireFunc([@tableSource, @tmp_func2], "tableSources")
end function
tableSource = function()
    return parallel([@requireTypeWord, @requireValueStar], "tableSource")
end function
expression = function()
    // tmp_func1 = function
    //     return notOperator() and expression()
    // end function
    // tmp_func2 = function
    //     return expression() and logicalOperator() and expression()
    // end function
    tmp_func3 = function
        parallel_func = function
            return parallel([@requireTypeWord, @requireTypeNumber, @requireTypeString], "predicate")
        end function
        return requireFunc([@requireTypeWord, @comparisonOperator, @parallel_func], "binaryComparisonPredic")
    end function
    // tmp_func4 = function
    //     return expressionAtom()
    // end function
    return parallel([@tmp_func3], "expression")
end function
expressionAtom= function
    return parallel([@requireTypeWord, @requireTypeNumber], "expressionAtom")
end function
notOperator = function()
    tmp_func1 = function
        return requireValue("NOT")
    end function
    tmp_func2 = function
        return requireValue("!")
    end function
    return parallel([@tmp_func2, @tmp_func2], "notOperator")
end function
logicalOperator = function()
    tmp_func1 = function
        return requireValue("AND")
    end function
    tmp_func2 = function
        return requireValue(["&", "&"])
    end function
    tmp_func3 = function
        return requireValue("XOR")
    end function
    tmp_func4 = function
        return requireValue("OR")
    end function
    tmp_func5 = function
        return requireValue("["|", "|"]")
    end function
    tmp_list = [@tmp_func1, @tmp_func2, @tmp_func3, @tmp_func4, @tmp_func5]
    return parallel(tmp_list, "logicalOperator")
end function
comparisonOperator = function()
    tmp_func1 = function
        return requireValue("=")
    end function
    tmp_func2 = function
        return requireValue(">")
    end function
    tmp_func3 = function
        return requireValue("<")
    end function
    tmp_func4 = function
        return requireValue(["<", "="])
    end function
    tmp_func5 = function
        return requireValue([">", "="])
    end function  
    tmp_func6 = function
        return requireValue(["<", ">"])
    end function
    tmp_func7 = function
        return requireValue(["<", "=", ">"])
    end function
    tmp_func8 = function
        return requireValue(["!", "="])
    end function
    tmp_list = [@tmp_func1, @tmp_func2, @tmp_func3, @tmp_func4, @tmp_func5, @tmp_func6, @tmp_func7, @tmp_func8]
    return parallel(tmp_list, "comparisonOperator")
end function

while true
    globals.query = user_input("SQL expression: ")
    globals.tokens = globals.lexer.tokenize(query)
    globals.idx = 0
    globals.idx_stack = []
    print globals.tokens
    resutl = selectStatement
    if resutl.flag and globals.idx == globals.tokens.len then
        print "SUCCESS!"
        print toJSON(resutl)
    end if
end while