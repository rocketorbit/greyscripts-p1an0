// by p1an0 2023-11-13
import_code("../lib/pystring.src")

Argparse = {"arg_name": null, "arg_type": null, "is_optional": null, "default": null}
Argparse.addArgument = function(arg_name, arg_type, is_optional=false, default=null) // arg_type = "flag", "value"
    self.arg_name.push(arg_name)
    self.arg_type.push(arg_type)
    self.is_optional.push(is_optional)
    self.default.push(default)
end function
Argparse.init = function()
    result = new self
    result.arg_name = []
    result.arg_type = []
    result.is_optional = []
    result.default = []
    return result
end function
Argparse.parseArgs = function(input_args)
    arg_cache = {"arg_name": self.arg_name[0:], "is_used": self.is_optional[0:], "value": self.default[0:]}
    
    cacheArg =  function(idx, value)
        arg_cache["value"][idx] = value
        arg_cache["is_used"][idx] = true
    end function
    
    for input_arg_idx in range(0, input_args.len-1, 1)
        each_input_args = input_args[input_arg_idx]
        if each_input_args.startswith("--") then
            current_arg_idx = self.arg_name.indexOf(each_input_args)
            if current_arg_idx == null then return "invalid option -- '"+each_input_args[2:]+"'"

            if self.arg_type[current_arg_idx] == "value" then

                if input_arg_idx + 1 >= input_args.len or input_args[input_arg_idx + 1].startswith("-") then return "missing value -- '"+each_input_args[2:]+"'"
                cacheArg(current_arg_idx, input_args[input_arg_idx + 1])
                input_arg_idx = input_arg_idx + 1

            end if
            if self.arg_type[current_arg_idx] == "flag" then
                cacheArg(current_arg_idx, true)
            end if
        else if each_input_args.startswith("-") then
            if each_input_args.len > 2 then
                for each_seperate_arg in each_input_args[1:]

                    current_arg_idx = self.arg_name.indexOf("-"+each_seperate_arg)
                    if current_arg_idx == null or self.arg_type[current_arg_idx] != "flag" then return "invalid option -- '"+each_seperate_arg+"'"
                    
                    cacheArg(current_arg_idx, true)
                    
                end for
            else
                current_arg_idx = self.arg_name.indexOf(each_input_args)
                if current_arg_idx == null then return "invalid option -- '"+each_input_args[1:]+"'"

                if self.arg_type[current_arg_idx] == "value" then
                    
                    if input_arg_idx + 1 >= input_args.len or input_args[input_arg_idx + 1].startswith("-") then return "missing value -- '"+each_input_args[1:]+"'"
                    cacheArg(current_arg_idx, input_args[input_arg_idx + 1])
                    input_arg_idx = input_arg_idx + 1
    
                end if
                if self.arg_type[current_arg_idx] == "flag" then
                    cacheArg(current_arg_idx, true)
                end if
            end if
        end if
    end for

    result = {}
    for arg_idx in range(0, arg_cache.arg_name.len-1, 1)
        result[arg_cache.arg_name[arg_idx]] = arg_cache.value[arg_idx] 
        if not arg_cache.is_used[arg_idx] then 
            error_msg = "missing option -- '"+arg_cache.arg_name[arg_idx][1:]+"'"
            if arg_cache.arg_name[arg_idx].startswith("--") then error_msg = "missing option -- '"+arg_cache.arg_name[arg_idx][2:]+"'"
            return error_msg
        end if
    end for

    return result
end function

// parser = new Argparse
// parser.addArgument("-l", "flag", true)
// parser.addArgument("-a", "flag", true)
// parser.addArgument("--d", "value")

// print parser.parseArgs(["-la", "-d"])