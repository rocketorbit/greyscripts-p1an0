import_code("/home/p1an0/lib/json.src")
LexicalAnalyzer = {}
LexicalAnalyzer.tokenize = function(expression)
   result = [] // [{"type": type, "value": value, "loc": [line, colume]}, ...]
   line = 0
   colume = 0
   while expression
      for each_rule in self.rules
         type = each_rule["type"]
         ignore = each_rule["ignore"]
         value = null

         for each_regex in each_rule["regex"]
            regex_result = expression.matches(each_regex)
            for each in regex_result.indexes
               value = regex_result[each]
               break
            end for
            if value then break
         end for

         if value then
            colume = colume + value.len
            if type == "ENTER" then
               line = line + 1
               colume = 0
            end if
            expression = expression[value.len:]
            if ignore then break
            result.push({"type": type, "value": value, "loc": [line, colume]})
            break
         end if
      end for
   end while
   return result
end function
LexicalAnalyzer.addRule = function(type, regex, ignore=false)
    if typeof(regex) != "list" then
        regex = [regex]
    end if
    self["rules"].push({"type": type, "regex": regex, "ignore": ignore})
end function
LexicalAnalyzer.init = function
   result = new LexicalAnalyzer
   result["rules"] = [] // [{"type": type, "regex": [regex, ...], "ignore": bool}, ..]
   return result
end function

lexer = LexicalAnalyzer.init
lexer.addRule("SPACE", "^[ \t]+", true)
lexer.addRule("ENTER", "^[\r\n]", true)
lexer.addRule("COMMENT", "^\/\/.*(?=\n|\r|$)", true)
lexer.addRule("EQUALS", "^==")
lexer.addRule("NOT_EQ", "^!=")
lexer.addRule("GT_EQ", "^>=")
lexer.addRule("LT_EQ", "^<=")
lexer.addRule("ASSIGN", "^=")
lexer.addRule("LESS_THAN", "^<")
lexer.addRule("GREATER_THAN", "^>")
lexer.addRule("COLON", "^:")
lexer.addRule("ADD", "^\+")
lexer.addRule("MINUS", "^-")
lexer.addRule("DIV", "^\/")
lexer.addRule("MOD", "^%")
lexer.addRule("STAR", "^\*")
lexer.addRule("COMMA", "^,");
lexer.addRule("SEMI_COLON", "^;")
lexer.addRule("DOT", "^\.")
lexer.addRule("AT", "^@")
lexer.addRule("OPEN_PAREN", "^\(")
lexer.addRule("CLOSE_PAREN", "^\)")
lexer.addRule("OPEN_BRACE", "^\{")
lexer.addRule("CLOSE_BRACE", "^\}")
lexer.addRule("OPEN_BRACKET", "^\[")
lexer.addRule("CLOSE_BRACKET", "^\]")
lexer.addRule("IDENTIFIER", "^[A-Za-z_][A-Za-z0-9_]*")
lexer.addRule("STRING", "^((?="")(?:""[^""\\]*(?:\\[\s\S][^""\\]*)*""))")
lexer.addRule("NUMBER", "^-?\d+(\.\d+)?")


test = "
a = 123
"

tokens = lexer.tokenize(test)
print tokens

GSItoken_idx = 0
GSIidx_stack = []
GSInode_stack = []
GSIast_stack = []
GSItokens = []
GSIastRelation = function(current_ast, last_ast)
    last_ts = last_ast.type_stack
    current_ts = current_ast.type_stack
    if last_ts.len == current_ts.len then
        is_brother = true
        for i in last_ts.indexes
            if last_ts[i] != current_ts[i] then
                return "other"
            end if
        end for
        return "brother"
    else if last_ts.len == current_ts.len - 1 then
        full_ts = last_ts + [last_ast.type]
        for i in full_ts.indexes
            if full_ts[i] != current_ts[i] then
                return "other"
            end if
        end for
        return "child"
    else
        return "other"
    end if
end function
GSIparse = function(gsi_tokens)
    globals.GSItoken_idx = 0
    globals.GSIidx_stack = []
    globals.GSInode_stack = []
    globals.GSIast_stack = []
    globals.GSItokens = gsi_tokens
    globals.GSInode_stack.push([greyscript])

    while globals.GSInode_stack.len > 0 and globals.GSItoken_idx < globals.GSItokens.len
        nodes = globals.GSInode_stack[-1]
        // print globals.GSItoken_idx
        if nodes.len <= 0 or nodes[0] == null then
            globals.GSInode_stack.pop
            globals.GSIast_stack.pop
            continue
        end if
        while globals.GSIast_stack.len >= 3
            current_ast = globals.GSIast_stack.pop
            last_ast = globals.GSIast_stack.pop
            ast_relation = GSIastRelation(current_ast, last_ast)
            if ast_relation != "child" then
                globals.GSIast_stack[-1].items.push(last_ast)
                each_range = {"start": globals.GSIast_stack[-1].items[0]["range"]["start"], "end": globals.GSIast_stack[-1].items[-1]["range"]["end"]}
                globals.GSIast_stack[-1]["range"] = each_range
                globals.GSIast_stack.push(current_ast)
            else
                globals.GSIast_stack.push(last_ast)
                globals.GSIast_stack.push(current_ast)
                break
            end if
        end while

        globals.GSIidx_stack.push(globals.GSItoken_idx)
        pass_flag = false
        while nodes.len > 0
            each_node = nodes.pull
            func_result = each_node.expand_func()
            next_node = each_node.next_node
            type_stack = each_node.type_stack
            if typeof(func_result) == "list" then
                globals.GSInode_stack.push(func_result)
                globals.GSIast_stack.push({"type": each_node.type, "type_stack": type_stack, "items": []})
                break
            else if func_result.flag == true then
                globals.GSInode_stack.push([next_node])
                globals.GSIast_stack.push({"type": each_node.type, "type_stack": type_stack, "items": func_result["items"], "range": func_result["range"]})
                globals.GSIidx_stack.pop
                pass_flag = true
                break
            end if
        end while
        
        if pass_flag == false then
            globals.GSItoken_idx = globals.GSIidx_stack.pop
        end if
    end while
    if globals.GSItoken_idx == globals.GSItokens.len then
        print "YES!"
        while globals.GSIast_stack.len >= 2
            current_ast = globals.GSIast_stack.pop
            globals.GSIast_stack[-1].items.push(current_ast)
            each_range = {"start": globals.GSIast_stack[-1].items[0]["range"]["start"], "end": globals.GSIast_stack[-1].items[-1]["range"]["end"]}
            globals.GSIast_stack[-1]["range"] = each_range
        end while
        print toJSON(globals.GSIast_stack)
        // print toJSON(globals.GSIast_stack[0])
    end if
end function
// start basic function
requireType = function(types, result_type="requireType")
    items = []
    if typeof(types) == "string" then
        types = [types]
    end if
    for each_type in types
        if globals.GSItoken_idx >= globals.GSItokens.len or globals.GSItokens[globals.GSItoken_idx]["type"] != each_type then
            return {"flag": false, "type": result_type}
        end if
        current_token = globals.GSItokens[globals.GSItoken_idx]
        each_range = {"start": [current_token["loc"][0], current_token["loc"][1]-current_token["value"].len], "end": current_token["loc"]}
        items.push({"token_value": current_token["value"], "token_type": current_token["type"], "range": each_range})
        globals.GSItoken_idx = globals.GSItoken_idx + 1
    end for
    ranges = {"start": [items[0]["range"]["start"][0], items[0]["range"]["start"][1]], "end": items[-1]["range"]["end"]}
    return {"flag": true, "type": result_type, "items": items, "range": ranges}
end function
requireValue = function(value, result_type="requireValue")
    items = []
    if typeof(value) == "string" then
        value = [value]
    end if
    for each_value in value
        if globals.GSItoken_idx >= globals.GSItokens.len or globals.GSItokens[globals.GSItoken_idx]["value"] != each_value then
            return {"flag": false, "type": result_type}
        end if
        current_token = globals.GSItokens[globals.GSItoken_idx]
        each_range = {"start": [current_token["loc"][0], current_token["loc"][1]-current_token["value"].len], "end": current_token["loc"]}
        items.push({"token_value": current_token["value"], "token_type": current_token["type"], "range": each_range})
        globals.GSItoken_idx = globals.GSItoken_idx + 1
    end for
    ranges = {"start": [items[0]["range"]["start"][0], items[0]["range"]["start"][1]], "end": items[-1]["range"]["end"]}
    return {"flag": true, "type": result_type, "items": items, "range": ranges}
end function
// expand_func(): list[GSINode] | {"flag": flag, "type": type, "items": items, "range": range}
GSINode = {"expand_func": null, "next_node": null, "type_stack": [],"type": null}
GSINode.series = function(nodes)
    result_nodes = []
    last_node = new nodes[-1]
    last_node.next_node = self.next_node
    last_node.type_stack = self.type_stack + [self.type]
    result_nodes.push(last_node)

    for i in range(nodes.len-2, 0, -1)
        each_node = new nodes[i]
        each_node.next_node = result_nodes[-1]
        each_node.type_stack = self.type_stack + [self.type]
        result_nodes.push(each_node)
    end for

    return [result_nodes[-1]]
end function
GSINode.parallel = function(nodes)
    result_nodes = []
    for i in nodes.indexes
        each_node = new nodes[i]
        each_node.next_node = self.next_node
        each_node.type_stack = self.type_stack + [self.type]
        result_nodes.push(each_node)
    end for
    return result_nodes
end function
GSINode.optional = function(node)
    return self.parallel([epsilonNode, node])
end function
GSINode.any = function(node)
    result_node = new node
    result_node.next_node = self
    result_node.type_stack = self.type_stack + [self.type]
    return [result_node, self]
end function

greyscript = new GSINode
greyscript.type = "greyscript"
greyscript.expand_func = function()
    return self.parallel([variableDeclaration])
end function
variableDeclaration = new GSINode
variableDeclaration.type = "variableDeclaration"
variableDeclaration.expand_func = function()
    return self.series([requireIdentifier, requireAssign, objectExpression])
end function
objectExpression = new GSINode
objectExpression.type = "objectExpression"
objectExpression.expand_func = function()
   return self.parallel([requireIdentifier, requireString, requireNumber])
end function

// reserved string start
epsilonNode = new GSINode
epsilonNode.type = "epsilonNode"
epsilonNode.expand_func = function()
    return {"flag": true, "type": result_type}
end function
requireIdentifier = new GSINode
requireIdentifier.type = "requireIdentifier"
requireIdentifier.expand_func = function
   return requireType("IDENTIFIER", "requireIdentifier")
end function
requireAssign = new GSINode
requireAssign.type = "requireAssign"
requireAssign.expand_func = function()
   return requireType("ASSIGN", "requireAssign")
end function
requireString = new GSINode
requireString.type = "requireString"
requireString.expand_func = function()
   return requireType("STRING", "requireString")
end function
requireNumber = new GSINode
requireNumber.type = "requireNumber"
requireNumber.expand_func = function()
   return requireType("NUMBER", "requireNumber")
end function
// reserved string end
GSIparse(tokens)